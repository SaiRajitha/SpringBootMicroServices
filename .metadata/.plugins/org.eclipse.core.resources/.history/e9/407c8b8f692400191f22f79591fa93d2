package com.project1.rest.webservices.restfulwebservices.jpa;

import java.net.URI;
import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.hateoas.Resource;
import org.springframework.hateoas.mvc.ControllerLinkBuilder;

import static org.springframework.hateoas.mvc.ControllerLinkBuilder.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

// controller
@RestController
public class UserJPAResource {

	@Autowired
	private UserDaoService service;
	
	@Autowired
	private UserRepository userRepository;

	// retrieve all 
	// GET /Users
	//@GetMapping(path = "/jpa/users")
	public List<User> retreiveAll() {
		return userRepository.findAll();
	}

	// retrieve one
	// GET /Users/{id}
	@GetMapping(path = "/jpa/users/{id}")
	public Resource<User> retrieve(@PathVariable int id) {
		User User = service.findOne(id);
		if(User == null) {
			throw new UserNotFoudException("id-" + id);
		}
		
		// show link for all Users
		Resource<User> resource = new Resource<User>(User);
		ControllerLinkBuilder linkTo = linkTo(methodOn(this.getClass()).retreiveAll());
		resource.add(linkTo.withRel("all-users"));
		return resource;
	}

	// create one
	// input User
	// output - CREATED status code & Return the Created URI
	@PostMapping(path = "/jpa/users")
	public ResponseEntity<Object> create(@Valid @RequestBody User User) {
		User savedUser = service.save(User);
		// to Return the Created URI
		URI location = ServletUriComponentsBuilder.
				fromCurrentRequest().path("/{id}").
				buildAndExpand(savedUser.getId()).toUri();
		return ResponseEntity.created(location).build();
	}
	
	// delete one
	@DeleteMapping(path = "/jpa/users/{id}")
	public void delete(@PathVariable Integer id) {
		User User = service.delete(id);
		
		if(User == null)
			throw new UserNotFoudException("id- " + id);
	}
}
