package com.project1.rest.webservices.restfulwebservices.jpa;

import java.net.URI;
import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.hateoas.Resource;
import org.springframework.hateoas.mvc.ControllerLinkBuilder;

import static org.springframework.hateoas.mvc.ControllerLinkBuilder.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

// controller
@RestController
public class UserJPAResource {

	@Autowired
	private CustomerDaoService service;

	// retrieve all 
	// GET /customers
	@GetMapping(path = "/customers")
	public List<Customer> retreiveAll() {
		return service.findAll();
	}

	// retrieve one
	// GET /customers/{id}
	@GetMapping(path = "/customers/{id}")
	public Resource<Customer> retrieve(@PathVariable int id) {
		Customer customer = service.findOne(id);
		if(customer == null) {
			throw new CustomerNotFoudException("id-" + id);
		}
		
		// show link for all customers
		Resource<Customer> resource = new Resource<Customer>(customer);
		ControllerLinkBuilder linkTo = linkTo(methodOn(this.getClass()).retreiveAll());
		resource.add(linkTo.withRel("all-users"));
		return resource;
	}

	// create one
	// input Customer
	// output - CREATED status code & Return the Created URI
	@PostMapping(path = "/customers")
	public ResponseEntity<Object> create(@Valid @RequestBody Customer customer) {
		Customer savedCustomer = service.save(customer);
		// to Return the Created URI
		URI location = ServletUriComponentsBuilder.
				fromCurrentRequest().path("/{id}").
				buildAndExpand(savedCustomer.getId()).toUri();
		return ResponseEntity.created(location).build();
	}
	
	// delete one
	@DeleteMapping(path = "/customers/{id}")
	public void delete(@PathVariable Integer id) {
		Customer customer = service.delete(id);
		
		if(customer == null)
			throw new CustomerNotFoudException("id- " + id);
	}
}
